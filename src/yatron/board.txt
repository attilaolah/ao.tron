The tron board
==============

The class :class:`yatron.board.Board` represents the state of the tron board
in discrete time. It has some utility functions to make it easier for your bot
to work with the board object. To construct a simple board object, we'll use
the :func:`yatron.input.plaintext` function.

    >>> from StringIO import StringIO
    >>> file = StringIO("""
    ... 5 5
    ... #####
    ... #  2#
    ... #   #
    ... #1  #
    ... #####
    ... """)

    >>> from yatron.input import plaintext
    >>> board = plaintext(file)
    >>> board
    <Board (5x5)>

To see that we actually have the correct board, we can use the
:attr:`yatron.board.Board.board` property. Note that this property is lazy, as
are most other properties: they won't calculate the result unless you ask for
it, and once calculated, they store it in the object for later use.

    >>> print board.board
    #####
    #  2#
    #   #
    #1  #
    #####

We can ask our coordinates using the :attr:`yatron.board.Board.me` property
(or it's alias, :attr:`yatron.board.Board.m`).

    >>> me = board.me
    >>> me
    (1, 1)

Similarly, we can use :attr:`yatron.board.Board.them` (and it's alias,
:attr:`yatron.board.Board.t`).

    >>> them = board.them
    >>> them
    (3, 3)

As you can see, the coordinates start from the lower left corner. The first
coordinate is the X axis, the second is the Y axis. We can ask for any
coordinate on the boar like this:

    >>> board[0, 0]
    '#'

    >>> board[me]
    '1'

    >>> board[them]
    '2'

    >>> board[10, 10]
    Traceback (most recent call last):
    ...
    IndexError: tuple index out of range

You can use the object's field markers for comparison:

    >>> assert board.W == board.WALL  == '#'
    >>> assert board.F == board.FLOOR == ' '
    >>> assert board.M == board.ME    == '1'
    >>> assert board.T == board.THEM  == '2'

To redefine these markers for a board instance, you can pass a dictionary to
it's `syntax` argument when creating the board:

    >>> from yatron.board import Board
    >>> syntax = {
    ...     'WALL':  'X',
    ...     'FLOOR': ' ',
    ...     'ME':    'A',
    ...     'THEM':  'B',
    ... }
    >>> data = (('X', 'X', 'X'),
    ...         ('X', 'A', 'X'),
    ...         ('X', ' ', 'X'),
    ...         ('X', 'B', 'X'),
    ...         ('X', 'X', 'X'))
    >>> fancy = Board((3, 5), data, syntax=syntax)
    >>> print fancy.board
    XXX
    XBX
    X X
    XAX
    XXX

    >>> fancy.ME
    'A'

    >>> fancy[fancy.them] == fancy.THEM
    True

If we iterate over the board, it will yield it's blocks and coordinates:

    >>> for block, coords in board:
    ...     print block, coords
    # (0, 0)
    # (1, 0)
    ...
    1 (1, 1)
    ...
    2 (3, 3)
    ...
    # (4, 4)

To check for possible moves from a certain position, we call
:func:`yatron.board.Board.possibilities`.

    >>> board.possibilities(me)
    ((1, 2), (2, 1))

    >>> board.possibilities(them)
    ((3, 2), (2, 3))

To check the distance between us and the opponent, we can use the
:attr:`yatron.board.Board.distance` property.

    >>> board.distance
    3

Let's try it with a more complex board:

    >>> file = StringIO("""
    ... 7 5
    ... #######
    ... #   #2#
    ... # # # #
    ... #1#   #
    ... #######
    ... """)

    >>> board = plaintext(file)
    >>> board.distance
    9

Or an even more complex one:

    >>> file = StringIO("""
    ... 14 10
    ... ##############
    ... #            #
    ... #          2 #
    ... #   ######   #
    ... #   #    #   #
    ... #   #    #   #
    ... #   ######   #
    ... # 1          #
    ... #            #
    ... ##############
    ... """)

    >>> board = plaintext(file)
    >>> board.distance
    13

Let's try an isolated board:

    >>> file = StringIO("""
    ... 14 10
    ... ##############
    ... ###         ##
    ... #  #    #  2 #
    ... #   ######   #
    ... #      #     #
    ... #     #      #
    ... #   ######   #
    ... # 1  #    #  #
    ... ##         ###
    ... ##############
    ... """)

    >>> board = plaintext(file)
    >>> board.distance
    -1

Asking it the second time it should be slightly faster.

    >>> board.distance
    -1
